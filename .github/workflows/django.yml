name: Python application

# Define los eventos que activarán este workflow
on:
  push:          # Se activa en cada push al repositorio
  pull_request:  # Se activa en cada pull request al repositorio

jobs:
  build:
    # Estrategia de testing con diferentes versiones de Python y PostgreSQL
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
        postgresversion: ['14', '15']

    # Define el sistema operativo para ejecutar el trabajo
    runs-on: ubuntu-latest

    # Configuración del servicio PostgreSQL necesario para las pruebas
    services:
      postgres:
        image: postgres:${{ matrix.postgresversion }}
        env:
          POSTGRES_USER: decide
          POSTGRES_PASSWORD: decide
          POSTGRES_DB: decide
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    # Paso para hacer checkout del código fuente
    - uses: actions/checkout@v3

    # Configura el entorno Python según la versión especificada en la matriz
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Caché de dependencias de Python para acelerar futuras ejecuciones
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Instala dependencias y realiza configuraciones necesarias
    - name: Install dependencies and configure
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install codacy-coverage
        cp decide/local_settings.gactions.py decide/local_settings.py

    # Ejecuta migraciones de la base de datos
    - name: Run migrations
      run: |
        cd decide
        python manage.py migrate

    # Ejecuta pruebas y genera reportes de cobertura
    - name: Run tests
      run: |
        cd decide
        coverage run --branch --source=. manage.py test --keepdb
        coverage report
        coverage xml

    # Construye la imagen Docker de la aplicación
    - name: Build Docker Image
      run: |
        docker build -t lucantdel/decide-part-rivera:${{ github.sha }} .

    # Inicia sesión en Docker Hub para subir imágenes
    - name: Docker Login
      run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

    # Sube la imagen Docker construida a Docker Hub
    - name: Push Docker Image
      run: |
        docker push lucantdel/decide-part-rivera:${{ github.sha }}

    # Sube los informes de cobertura a Codacy
    - name: Codacy Coverage Reporter
      uses: codacy/codacy-coverage-reporter-action@v1
      with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: decide/coverage.xml 
          
    # Verifica el formato de los commits
    - name: Check Commit Format
      run: ./check_commit_format.sh
